#!/usr/bin/env bash

configure_database_yml()
{
  if [[ ! -s "$shared_path/config/database.yml" ]]
  then
    true "${database:=postgresql}"
    log "\n${environment}: &defaults\n  adapter: ${database}\n  username: $project\n  password: '$project'\n  database: ${project}_${environment}\n  pool: 5\n  timeout: 5000" \
      to "$shared_path/config/database.yml"

    if [[ "$database" = "mysql" ]]
    then
      log "  socket: ${socket:-/tmp/mysql.sock}\n  encoding: utf8\n" \
        to "$shared_path/config/database.yml"
    fi
  fi

  if variable_is_nonempty database && command_exists gem
  then
    case "$database" in
      postgresql)
        install_gems pg
        if [[ "$?" -ne 0 ]] ; then
          pg_config=$(command -v pg_config)
          install_gem pg -- --with-pg-config=${pg_config:-/usr/local/postgresql/bin/pg_config}
          # gem install pg --no-rdoc --no-ri -- --with-pg-config=${pg_config:-/usr/local/postgresql/bin/pg_config}
        fi
        ;;

      mysql)
        install_gems mysql
        if [[ "$?" -ne 0 ]] ; then
          mysql_config=$(command -v mysql_config)
          install_gem mysql -- --with-mysql-config=${mysql_config:-/usr/local/mysql/bin/mysql_config}
          #gem install mysql --no-rdoc --no-ri -- --with-mysql-config=${mysql_config:-/usr/local/mysql/bin/mysql_config}
        fi
        ;;

      mongodb)
        install_gems mongomapper
        ;;

      sqlite*|*)
        install_gems sqlite3
        ;;
    esac
  fi
}

configure_profiles()
{
  # Ensure the .bdsmrc file and the profiles are setup properly.
  ensure_files_exist "$HOME/.bashrc" "$HOME/.bash_profile"

  if ! file_contains "$HOME/.bashrc" '\.bdsmrc'
  then
    log '[[ -s "$HOME/.bdsmrc" ]] && . "$HOME/.bdsmrc"' \
      to "$HOME/.bashrc"
  fi

  if ! file_contains "$HOME/.bash_profile" '\.bashrc'
  then
    log  '[[ "-s $HOME/.bashrc" ]] && . "$HOME/.bashrc"' \
      to "$HOME/.bash_profile"
  fi

  if ! file_contains "$HOME/.bash_profile" '\.rvmrc'
  then
    log '[[ -s "$HOME/current/.rvmrc" ]] && . "$HOME/current/.rvmrc"' \
      to "$HOME/.bash_profile"
  fi
}

configure_bdsmrc()
{ # TODO: Separate project specific vs rails specific env vars into project module.

  variables_must_be_nonempty project

  # TODO: These variables should be read & set via the defaults module.
  local _config="${HOME}/.bdsmrc"

  if ! file_contains "${_config}" 'project='
  then
    log "\nexport project=\"${project:-$user}\"" to ${_config}
  fi

  variables_must_be_nonempty environment

  if ! file_contains "${_config}" 'environment='
  then
    log "\nexport environment=\"$environment\"" to ${_config}
  fi

  if ! file_contains "${_config}" 'RAILS_ENV='
  then
    log "\nexport RAILS_ENV=\"$environment\"" to ${_config}
  fi

  if variable_is_nonempty repository_url && ! file_contains "${_config}" "repository_url="
  then
    log "\nexport repository_url=\"$repository_url\"" to "${_config}"
  fi

  if variable_is_nonempty database && ! file_contains "${_config}" 'database='
  then
    log "export database=\"${database}\"" to "${_config}"
  fi
}

fetch_repository()
{ # TODO: Switch this to use the vcs module.
  if [[ "$scm" = "git" ]] || (echo "$repository_url" | awk "/git/" 2>/dev/null)
  then
    if ! directory_exists "$shared_path/$project/.git"
    then
      git clone ${scm_flags[@]} $repository_url $project
    fi
  elif [[ "$scm" = "svn" ]] || (echo "$repository_url" | awk "/svn/" 2>/dev/null)
  then
    if ! directory_exists "$shared_path/$project/.svn"
    then
      svn checkout  ${scm_flags[@]} $repository_url $project
    fi
  elif [[ "$scm" = "hg" ]] || (echo "$repository_url" | awk "/hg/" 2>/dev/null)
  then
    if ! directory_exists "$shared_path/$project/.hg"
    then
      hg clone ${scm_flags[@]} $repository_url $project
    fi
  else
    fail "repository_url type not known, expecting {git,svn,hg} in the repository_url url."
  fi
}

setup_shared_path()
{
  (
  enter "${shared_path}"
  ensure_paths_exist config log pids sockets "public/assets" tmp
  )
}

configure_rvm()
{
  if file_is_empty_or_missing "${HOME}/.rvm/scripts/rvm"
  then
    if ! file_contains "$HOME/.rvmrc" 'rvm_path='
    then
      log 'export rvm_path="$HOME/.rvm"' to "$HOME/.rvmrc"
    fi

    if ! file_contains "$HOME/.rvmrc" 'rvm_install_on_use_flag'
    then
      log 'export rvm_install_on_use_flag=1' to "$HOME/.rvmrc"
    fi

    if ! file_contains "$HOME/.rvmrc" 'rvm_gems_path'
    then
      log 'export rvm_gems_path="$HOME/.rvm/gems"' to "$HOME/.rvmrc"
    fi

    source_files "$HOME/.rvmrc"

    rvm_install
  fi

  ensure_files_exist "$HOME/.bash_profile"

  if file_is_nonempty "$shared_path/$project/.rvmrc"
  then
    (
      source_files \
        "$HOME/.rvm/scripts/rvm" "$HOME/.rvmrc" "$shared_path/$project/.rvmrc"
    )
  fi

  if ! file_contains "$HOME/.bash_profile" "scripts/rvm"
  then
    log "[[ -s \"${rvm_path:-"$HOME/.rvm"}/scripts/rvm\" ]] && . \"${rvm_path:-"$HOME/.rvm"}/scripts/rvm\"  # Load RVM into a shell session *as a function*" \
    to "${HOME}/.bash_profile"
  fi
}

setup_application_server()
{
  case "${server:-}" in
    unicorn)
      # TODO: Extension check
      extension_action unicorn setup
      ;;
    mongrel2)
      extension_action mongrel2 setup
      ;;
    thin)
      extension_action thin setup
      ;;
    passenger) # Standalone
      extension_action passenger setup
      ;;
    *)
      # Default to Unicorn
      extension_action unicorn setup
      ;;
  esac
}

bootstrap_gems()
{
  (
    . "${HOME}/.rvm/scripts/rvm"

    enter "${release_path}"

    if file_exists "Gemfile"
    then
      gem install bundler --no-rdoc --no-ri
      bundle
    fi
  )
}

