#!/usr/bin/env bash

redis_postinstall()
{
  if file_is_nonempty "${service_config_file}"
  then
    log "${service_config_file} already exists, not overwriting."
  else
    log "#installing redis.conf file to ${service_config_file}"

    sed -e "s#pidfile .*\$#pidfile ${service_pid_file}#" \
        -e "s#logfile .*\$#logfile ${service_log_file}#" \
        -e "s#dir .*\$#dir ${service_db_path}/active#" \
        -e "s#^.*daemonize .*\$#daemonize yes#" \
        -e "s#dbfilename .*\$#dbfilename ${service_db_file}#" \
        -e "s#port .*\$#port ${service_port}#" \
        -e "s#bind .*\$#bind ${service_bind_interface}#" \
      "${source_path}/${package_dir}/redis.conf" > "${service_config_file}"

    chown_files --recursive "$service_user" "${service_config_file}"
  fi

  return 0
}

redis_install()
{
  local _source="src/" _major _minor _patch

  _major=${package_version//.*}
  # _patch=${package_version//*.}
  _minor=${package_version%.*}
  _minor=${_minor#*.}

  if (( _major >= 2 ))
  then
    if ! (( _major = 2 && _minor >= 2 ))
    then
      _source=""
    fi
  else
    _source=""
  fi

  # TODO: Install to install_path
  ensure_paths_exist "${install_path}/bin"

  log "#installing ${package_name} ${package_version}...\n"
  for file in redis-server redis-cli
  do
    if ! install -b "${_source}${file}" "${install_path}/bin/${file}"
    then
      fail "${package_name} ${package_version} failed to install (specifically ${file}).\n"
    fi
  done
}

